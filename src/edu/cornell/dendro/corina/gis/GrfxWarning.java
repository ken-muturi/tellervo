package edu.cornell.dendro.corina.gis;

import java.awt.BorderLayout;
import java.awt.Component;
import java.awt.Dimension;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;

import javax.swing.JFrame;
import javax.swing.JPanel;
import javax.swing.event.EventListenerList;
import javax.swing.event.TableModelEvent;
import javax.swing.event.TableModelListener;

import edu.cornell.dendro.corina.core.App;
import edu.cornell.dendro.corina.ui.Alert;
import edu.cornell.dendro.corina.ui.I18n;
import gov.nasa.worldwind.event.RenderingExceptionListener;

/**
 *
 * @author  peterbrewer
 */
public class GrfxWarning extends javax.swing.JPanel implements ActionListener {
    
	JPanel mapPanel;
	protected EventListenerList listenerList = new EventListenerList();
	
	
    /** Creates new form GrfxWarning */
    public GrfxWarning() {
        initComponents();
        setupGui();
    }
    
    public GrfxWarning(JPanel mapPanel) {
        this.mapPanel = mapPanel;
    	initComponents();
        setupGui();
    }
    
    private void setupGui()
    {
    	this.txtGrfxWarning.setContentType("text/html");
    	this.txtGrfxWarning.setEditable(false);
    	this.txtGrfxWarning.setText(I18n.getText("preferences.mapping.grfxwarning"));
    	
    	this.btnRetry.addActionListener(this);
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        txtGrfxWarning = new javax.swing.JTextPane();
        btnRetry = new javax.swing.JButton();

        setAlignmentX(1.0F);
        setLayout(new javax.swing.BoxLayout(this, javax.swing.BoxLayout.PAGE_AXIS));

        jScrollPane1.setAlignmentY(1.0F);
        jScrollPane1.setAutoscrolls(true);
        jScrollPane1.setHorizontalScrollBar(null);
        jScrollPane1.setMaximumSize(new java.awt.Dimension(390, 180));
        jScrollPane1.setViewportView(txtGrfxWarning);

        add(jScrollPane1);

        btnRetry.setText("Re-test 3D Graphics");
        btnRetry.setAlignmentX(0.5F);
        btnRetry.setAlignmentY(1.0F);
        add(btnRetry);
    }// </editor-fold>//GEN-END:initComponents
    
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    protected javax.swing.JButton btnRetry;
    protected javax.swing.JScrollPane jScrollPane1;
    protected javax.swing.JTextPane txtGrfxWarning;
    // End of variables declaration//GEN-END:variables
	
    
    @Override
	public void actionPerformed(ActionEvent e) {
		if(e.getSource()==this.btnRetry)
		{
			App.prefs.setBooleanPref("opengl.failed", false);
			if(mapPanel==null)
			{
				final GISFrame map = new GISFrame();
				map.setVisible(true);
				
	            map.wwMapPanel.getWwd().addRenderingExceptionListener(new RenderingExceptionListener()
	            {
	                public void exceptionThrown(Throwable t)
	                {
	                	map.dispose();
	                	Alert.message(I18n.getText("preferences.testFailed"), I18n.getText("preferences.grfxTestFailed"));
	                	return;
	                }
	                
	            });
	            
	            this.fireActionEvent(new ActionEvent(btnRetry, 1001, "pass"));
				
			}
			else
			{
				GISPanel wwMapPanel = new GISPanel(new Dimension(300,300), false, TridasMarkerLayerBuilder.getMarkerLayerForAllSites());
				mapPanel.setLayout(new BorderLayout());
				mapPanel.add(wwMapPanel, BorderLayout.CENTER);
			}
		}

		
	}
    
	public void addActionListener(ActionListener l) {
		listenerList.add(ActionListener.class, l);
	}
    
    public void removeTableModelListener(ActionListener l) {
    	listenerList.remove(ActionListener.class, l);
    }
    
    public void fireActionEvent(ActionEvent e) {
    	
    	Object[] listeners = listenerList.getListenerList();
    	for (int i = listeners.length-2; i>=0; i-=2) {
    	    if (listeners[i]==TableModelListener.class) {
    		((ActionListener)listeners[i+1]).actionPerformed(e);
    	    }
    	}
    }
    
    
}
