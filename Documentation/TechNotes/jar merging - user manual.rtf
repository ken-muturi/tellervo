{\rtf1\mac\ansicpg10000\cocoartf102
{\fonttbl\f0\fswiss\fcharset77 Helvetica;}
{\colortbl;\red255\green255\blue255;}
\margl1440\margr1440\vieww9180\viewh11680\viewkind0
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\ql\qnatural

\f0\fs24 \cf0 jar merging:\
\
first attempt: unjar all in same folder, then re-jar.  need to cat all the manifests together, perhaps omitting some lines.\
\
licensing: JH can't be linked with a stock-GPL program.  choices: append GPL, or require both Corina.jar and JavaHelp.jar?  (in same folder.)  neither is terribly appealing.  (next version: bypass jh entirely.)\
\
are batik (apache/bsd?), crimson (GPL?), and log4j (??) linkable with corina?\
\
should i make them optional?  i.e., "if you want to be able to export SVG files, download batik.jar, and put it in the same folder." / "the export-svg feature is only available if you download the Batik SVG library, and put it in the same folder as the corina.jar file.  (download now).  -- can i find out where corina.jar lives?  probably not.  either way, user will have to restart corina.  not fun.  link, if legal.\
\
	-- another counter-argument: xml (and hopefully logging) are pretty fundamental to corina.\
\
email javahelp team re open-source.\
\
===================\
it looks like javahelp linking probably won't work.  (but email javahelp team, anyway.)  so the best we'll get is \{ Corina.jar + JavaHelp.jar \}, for now.\
\
in the future, we'll use the native help systems.  for example, on windows, we'll run the docbook to make htmlhelp, run that through windows' help builder, and include the resulting corina-manual.hlp (?) file in Corina.jar.  when help is first invoked on windows, the file will be copied to "$(TMP)/Corina Temporary Files/Corina Manual.hlp", and it will be opened from there.\
\
size?\
-- save 1.0 MB from not having to include the javahelp version of the manual\
-- save 0.4 MB from not having to include javahelp itself\
-- lose 0.5 MB (wild guess) from having to include win32 version of help\
-- lose 0.5 MB (html size) from having to include html (mac) version of help\
-- what to do on linux?  for now, using html is fine.\
net result: smaller binary to distribute, even with 2 complete versions of the manual inside it.  yay!\
\
before i figure out how to make win32 .hlp files, i can always use plain HTML on win32, too.  just copy all of the manual to $(TMP)/Corina Temporary Files/Manual/, and point the web browser there.  plus, it works everywhere.\
\
this is a better all-around solution than javahelp: it's completely open (docbook, html, plain files), it uses a system the user already knows (web browser, not a proprietary help system), it works natively on all platforms (native web browser, not a poorly-written java program).  you can access the TOC, the index, and printing.  web links work exactly as expected.  you're not dependent on java's html rendering.\
\
what do you lose?  full-text searching.  which kind of sucks.  but with a good index, it shouldn't be a terrible loss.\
\
-- if i decide full-text searching is actually a big loss, i can write a menuitem Help -> Search Manual...  -- it'll be a dialog which asks for a word, it'll search all help files (how to avoid the HTML formatting?), and display the results, perhaps in context.  clicking on a result will open it in the web browser.  no, better: generate a page "$(TMP)/Corina Temp Files/Search results - ken - %date - %time.html", and open that.  it can show context, relevance, etc.\
\
	-- i still won't get text hilited on each page.  but users can use the browser's find-in-page to find it once they know it's on a page, so that's even less of an issue.\
}