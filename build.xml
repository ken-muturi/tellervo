<!-- A "project" describes a set of targets that may be requested
     when Ant is executed.  The "default" attribute defines the
     target which is executed if no specific target is requested,
     and the "basedir" attribute defines the current working directory
     from which Ant executes the requested task.  This is normally
     set to the current working directory.
-->

<project name="corinaws" default="native-all-platforms" basedir=".">

<!-- ===================== Property Definitions =========================== -->

<!--
  Each of the following properties are used in the build script.
  Values for these properties are set by the first place they are
  defined, from the following list:
  * Definitions on the "ant" command line (ant -Ddeploy.home=xyz compile)
  * Definitions from a "build.properties" file in the top level
    source directory
  * Definitions from a "build.properties" file in the developer's
    home directory
  * Default definitions in this build.xml file

  You will note below that property values can be composed based on the
  contents of previously defined properties.  This is a powerful technique
  that helps you minimize the number of changes required when your development
  environment is modified.  Note that property composition is allowed within
  "build.properties" files as well as in the "build.xml" script.
-->

  <!-- Load user property definition overrides -->
  <property file="build.properties"/>
  <property file="${user.home}/build.properties"/>
  <property file="${os.name}.properties"/>
	
	


<!-- ==================== File and Directory Names ======================== -->
<!--
  These properties generally define file and directory names (or paths) that
  affect where the build process stores its outputs.

  app.name             Base name of this application, used to
                       construct filenames and directories.
                       Defaults to "myapp".

  app.version          Version identifier for this application.

  build.home           The directory into which the "prepare" and
                       "compile" targets will generate their output.
                       Defaults to "build".

  deploy.home          The name of the directory into which the
                       deployment hierarchy will be created, and into
                       which the build directory will be copied.
                       Usually "{your_servlet_container_home}/webapps/{app.name}".

  dist.home            The name of the base directory in which
                       distribution files are created.
                       Defaults to "dist".
-->

<!-- I'm not sure what good this is
  <exec executable="svn" output="svninfo.xml">
    <arg line="info - -xml"/>
  </exec>
  <xmlproperty file="svninfo.xml" collapseattributes="true"/>

  <property name="svn.revision"  value="${info.entry.revision}"/>
-->
  <property name="app.name"      value="corina"/>
  <property name="app.version"   value="aardvark"/>
  <property name="app.keystore"  value="corina.keystore.set.in.build.properties"/>
  <property name="build.home"    value="build"/>
  <property name="deploy.home"   value="deploy"/>
  <property name="dist.home"     value="target"/>
  <property name="launch4j.dir"  value="(set this in os specific properties file!)" />
  <property name="jarbundler.dir"  location="Libraries" />

<!--  ==================== Compilation Control Options ==================== -->

<!--
  These properties control option settings on the Javac compiler when it
  is invoked using the <javac> task.

  compile.debug        Should compilation include the debug option?

  compile.deprecation  Should compilation include the deprecation option?

  compile.optimize     Should compilation include the optimize option?
-->

  <property name="compile.debug"       value="true"/>
  <property name="compile.deprecation" value="false"/>
  <property name="compile.optimize"    value="true"/>

<!-- ==================== External Dependencies =========================== -->

<!--

  Use property values to define the locations of external JAR files on which
  your application will depend.  In general, these values will be used for
  two purposes:
  * Inclusion on the classpath that is passed to the Javac compiler
  * Being copied into the "/WEB-INF/lib" directory during execution
    of the "deploy" target.

  This following jars are required (to build):

  log4j.jar            Log4J logging library.  Only needed at this time for corina.db.DBTest as everything
                       has been moved to Commons Logging.  This dependency should probably be eventually removed
                       unless some other library is dependent on it.
                       Version: 1.2.8
                       URL: http://logging.apache.org/log4j

  commons-logging.jar  Jakarta Commons Logging
                       Version: *
                       URL: http://jakarta.apache.org/commons/logging/

  jfontchooser.jar     Font Chooser dialog implementation
                       Version: *
                       URL: used to be: http://www.cruftworks.com/software/JFontChooser
                            now: ?

  junit.jar            JUnit test library.
                       Version: *
                       URL: http://junit.org

  jhall.jar            JavaHelp library.
                       Version: *
                       URL: http://java.sun.com/products/javahelp/

  ftp.jar              FTP library for access to ITRDB.
                       Version: *
                       URL: http://www.enterprisedt.com/downloads/ftp.html

  batik.jar            Batik SVG library for exporting graphs and maps as SVG.
                       Version: *
                       URL: http://xml.apache.org/batik/

  comm.jar             JavaComm library for serial IO for experimental measurement support.
                       Version: *
                       URL: http://java.sun.com/products/javacomm/
-->

    <property name="batik.jar" value="(set this in build.properties!)"/>
    <property name="junit.jar" value="(set this in build.properties!)"/>
    <property name="RXTXcomm.jar" value="(set this in build.properties!)"/>
    <property name="postgresql-8.2-506.jdbc.jar" value="(set this in build.properties!)"/>
    <property name="jdom.jar" value="(set this in build.properties!)"/>
    <property name="pljava.jar" value="(set this in build.properties!)"/>
    <property name="forms.jar" value="(set this in build.properties!)"/>
    <property name="swing-layout.jar" value="(set this in build.properties!)"/>
    <property name="log4j.jar" value="(set this in build.properties!)"/>
    <property name="jna.jar" value="(set this in build.properties!)"/>
    <property name="commons-logging.jar" value="(set this in build.properties!)"/>
    <property name="mozswing.jar" value="(set this in build.properties!)"/>
    <property name="jfontchooser.jar" value="(set this in build.properties!)"/>
    <property name="JFontChooser.jar" value="(set this in build.properties!)"/>
    <property name="apache-mime4j.jar" value="(set this in build.properties!)"/>
    <property name="commons-codec.jar" value="(set this in build.properties!)"/>
    <property name="httpclient.jar" value="(set this in build.properties!)"/>
    <property name="httpcore.jar" value="(set this in build.properties!)"/>
    <property name="httpmime.jar" value="(set this in build.properties!)"/>
    <property name="jh.jar" value="(set this in build.properties!)"/>
    <property name="jsyntaxpane.jar" value="(set this in build.properties!)"/>
    <property name="activation.jar" value="(set this in build.properties!)"/>
    <property name="l2fprod-common-shared.jar" value="(set this in build.properties!)"/>
    <property name="l2fprod-common-sheet.jar" value="(set this in build.properties!)"/>
    <property name="jaxen.jar" value="(set this in build.properties!)"/>
    <property name="l2fprod-common-buttonbar.jar" value="(set this in build.properties!)"/>
    <property name="iText.jar" value="(set this in build.properties!)"/>
    <property name="jaxb-api.jar" value="(set this in build.properties!)"/>
    <property name="jsr173_1.0_api.jar" value="(set this in build.properties!)"/>
    <property name="jaxb-impl.jar" value="(set this in build.properties!)"/>
    <property name="commons-lang.jar" value="(set this in build.properties!)"/>
    <property name="coll-prop.jar" value="(set this in build.properties!)"/>
    <property name="jaxb2-basics-runtime.jar" value="(set this in build.properties!)"/>
    <property name="PDFRenderer.jar" value="(set this in build.properties!)"/>
    <property name="worldwind-0.6.570.13645.jar" value="(set this in build.properties!)"/>
    <property name="jogl.jar" value="(set this in build.properties!)"/>
    <property name="gluegen-rt.jar" value="(set this in build.properties!)"/>
    <property name="JGoogleAnalyticsTracker-1.1.0.jar" value="(set this in build.properties!)"/>
    <property name="java-simple-mvc-1.3.3-SNAPSHOT.jar" value="(set this in build.properties!)"/>
    <property name="TridasJLib-0.0.1-SNAPSHOT.jar" value="(set this in build.properties!)"/>
    <property name="DendroFileIO-0.0.1-SNAPSHOT.jar" value="(set this in build.properties!)"/>
	
<!-- ==================== Compilation Classpath =========================== -->

<!--
  Rather than relying on the CLASSPATH environment variable, Ant includes
  features that makes it easy to dynamically construct the classpath you
  need for each compilation.  
-->
  <path id="compile.classpath">
    <pathelement location="${batik.jar}"/>
    <pathelement location="${junit.jar}"/>
    <pathelement location="${RXTXcomm.jar}"/>
    <pathelement location="${postgresql-8.2-506.jdbc.jar}"/>
    <pathelement location="${jdom.jar}"/>
    <pathelement location="${pljava.jar}"/>
    <pathelement location="${forms.jar}"/>
    <pathelement location="${swing-layout.jar}"/>
    <pathelement location="${log4j.jar}"/>
    <pathelement location="${jna.jar}"/>
    <pathelement location="${commons-logging.jar}"/>
    <pathelement location="${mozdom4java.jar}"/>
    <pathelement location="${MozillaInterfaces.jar}"/>
    <pathelement location="${mozswing.jar}"/>
    <pathelement location="${MozillaGlue.jar}"/>
    <pathelement location="${jfontchooser.jar}"/>
    <pathelement location="${JFontChooser.jar}"/>
    <pathelement location="${apache-mime4j.jar}"/>
    <pathelement location="${commons-codec.jar}"/>
    <pathelement location="${httpclient.jar}"/>
    <pathelement location="${httpcore.jar}"/>
    <pathelement location="${httpmime.jar}"/>
    <pathelement location="${jh.jar}"/>
    <pathelement location="${jsyntaxpane.jar}"/>
    <pathelement location="${activation.jar}"/>
    <pathelement location="${l2fprod-common-shared.jar}"/>
    <pathelement location="${l2fprod-common-sheet.jar}"/>
    <pathelement location="${jaxen.jar}"/>
    <pathelement location="${l2fprod-common-buttonbar.jar}"/>
    <pathelement location="${iText.jar}"/>
    <pathelement location="${jaxb-api.jar}"/>
    <pathelement location="${jsr173_1.0_api.jar}"/>
    <pathelement location="${jaxb-impl.jar}"/>
    <pathelement location="${commons-lang.jar}"/>
    <pathelement location="${coll-prop.jar}"/>
    <pathelement location="${jaxb2-basics-runtime.jar}"/>
    <pathelement location="${PDFRenderer.jar}"/>
    <pathelement location="${worldwind-0.6.570.13645.jar}"/>
    <pathelement location="${jogl.jar}"/> 
    <pathelement location="${gluegen-rt.jar}"/>
    <pathelement location="${JGoogleAnalyticsTracker-1.1.0.jar}"/>
    <pathelement location="${java-simple-mvc-1.3.3-SNAPSHOT.jar}"/>
    <pathelement location="${TridasJLib-0.0.1-SNAPSHOT.jar}"/>
    <pathelement location="${DendroFileIO-0.0.1-SNAPSHOT.jar}"/>
  	<pathelement location="${jarbundler-2.1.0.jar}"/>
  </path>

  <path id="xjc.classpath">
  	<pathelement location="Libraries/jaxb/jaxb-xjc.jar"/>
	<pathelement location="Libraries/commons-lang-2.4.jar"/>
  	<pathelement location="Libraries/jaxb/plugin/jaxb2-basics-ant-0.5.1.jar"/>
  	<pathelement location="Libraries/jaxb/plugin/jaxb2-basics-0.5.1.jar"/>
  	<pathelement location="Libraries/jaxb/plugin/jaxb2-basics-annotate-0.5.1.jar"/>
  	<pathelement location="Libraries/jaxb/plugin/jaxb2-basics-tools-0.5.1.jar"/>
  	<pathelement location="Libraries/jaxb/plugin/jaxb2-basics-runtime-0.5.1.jar"/>
 	<pathelement location="Libraries/jaxb/plugin/collection-setter-injector.jar"/> 
  	<pathelement location="Libraries/jaxb/plugin/annox-0.4.2.jar"/>
  	<pathelement location="Libraries/jaxb/plugin/xjc-if-ins+generics.jar"/>
  	<pathelement location="Libraries/jaxb/plugin/TridasAandI.jar"/>
    <pathelement location="Libraries/jaxb/plugin/TridasAnnotationsPlugin.jar"/>
  	<pathelement location="${jaxb2-basics-runtime.jar}"/>
    <pathelement location="${commons-logging.jar}"/>
  	<!-- <pathelement location="Libraries/jaxb/jaxb-impl.jar"/>
  	<pathelement location="Libraries/jaxb/jaxb-api.jar"/>
  	<pathelement location="Libraries/jaxb/plugin/proplistplugin.jar"/> -->
  </path>
	
    <path id="ant-deb.classpath">
        <fileset dir="native/LinBuild/" includes="*.jar"/>
    </path>

	
  <!-- XJC JAXB schema compiler -->
  <taskdef name="xjc" classname="org.jvnet.jaxb2_commons.xjc.XJC2Task">
	<classpath refid="xjc.classpath" />
  </taskdef>
	
  <!-- Launch4j -->
  <taskdef name="launch4j"
	classname="net.sf.launch4j.ant.Launch4jTask"
	classpath="${launch4j.dir}/launch4j.jar:${launch4j.dir}/lib/xstream.jar" />

  <!-- MacOSX Bundler -->
  <taskdef name="jarbundler" 
	classname="net.sourceforge.jarbundler.JarBundler" 
	classpath="${jarbundler.dir}/jarbundler-2.1.0.jar"/>

  <!-- Deb -->
  <taskdef name="deb" 
  	classname="com.googlecode.ant_deb_task.Deb" 
  	classpathref="ant-deb.classpath"/>
  <taskdef name="desktopEntry" 
  	classname="com.googlecode.ant_deb_task.DesktopEntry" 
  	classpathref="ant-deb.classpath"/>
	
<!-- ==================== All Target ====================================== -->

<!--
  The "all" target is a shortcut for running the "clean" target followed
  by the "compile" target, to force a complete recompile.
-->

  <target name="all" depends="clean,compile"
   description="Clean build and dist, then compile"/>

<!-- ==================== Clean Target ==================================== -->

<!--
  The "clean" target deletes any previous "build" and "dist" directory,
  so that you can be ensured the application can be built from scratch.
-->

  <target name="clean"
   description="Delete old build and dist directories">
    <delete dir="${build.home}"/>
    <delete dir="${dist.home}"/>
    <delete dir="${deploy.home}"/>
  </target>


<!-- ==================== Compile Target ================================== -->
<!--

  The "compile" target transforms source files (from your "src" directory)
  into object files in the appropriate location in the build directory.
  This example assumes that you will be including your classes in an
  unpacked directory hierarchy under "/WEB-INF/classes".
-->

  <target name="compile" depends="prepare" description="Compile Java sources">
    <!-- Compile Java classes as necessary -->
    <javac srcdir="src"
          destdir="${build.home}"
            debug="${compile.debug}"
      deprecation="${compile.deprecation}"
         optimize="${compile.optimize}"
         excludes="${compile.exclude}">
      <classpath refid="compile.classpath"/>
    </javac>
  </target>

<!-- ==================== Dist Target ===================================== -->

<!--
  The "dist" target creates a binary distribution of your application
  in a directory structure ready to be archived in a tar.gz or zip file.
  Note that this target depends on two others:
  * "deploy" so that the entire web application (including external
    dependencies) will have been assembled
  * "javadoc" so that the application Javadocs will have been created
-->

  <target name="dist" depends="compile, javadoc" description="Create binary distribution">
    <!-- Copy documentation subdirectory -->
    <!--  <copy todir="${dist.home}/docs">
      <fileset dir="doc"/>
    </copy> -->
    <!-- Create application JAR file -->
    <jar jarfile="${dist.home}/${app.name}-${app.version}.jar"
         basedir="${build.home}" index="true" compress="true">
    	<manifest>
    		<attribute name="Main-Class" value="${app.name}.gui.Startup"/>
   		</manifest>   	
   	</jar>
    <!-- Copy additional files to ${dist.home} as necessary -->
  </target>

<!-- ==================== Javadoc Target ================================== -->

<!--
  The "javadoc" target creates Javadoc API documentation for the Java
  classes included in your application.  Normally, this is only required
  when preparing a distribution release, but is available as a separate
  target in case the developer wants to create Javadocs independently.
-->

  <target name="javadoc" depends="compile" description="Create Javadoc API documentation">
    <mkdir dir="${dist.home}/docs/api"/>
    <javadoc sourcepath="src"
           classpathref="compile.classpath"
                destdir="${dist.home}/docs/api"
           packagenames="edu.cornell.dendro.corina.*,edu.cornell.dendro.corina_indexing.*"
                 access="public"
                 author="true"
                version="true"
                    use="true"
          breakiterator="true"
            windowtitle="${app.name} ${app.version} API Documentation">
      <doctitle><![CDATA[${app.name} ${app.version}<br/>API Documentation]]></doctitle>
      <header><![CDATA[${app.name} ${app.version}<br/>API Documentation]]></header>
    </javadoc>
  </target>

<!-- ==================== Prepare Target ================================== -->

<!--
  The "prepare" target is used to create the "build" destination directory,
  and copy the static contents of your web application to it.  If you need
  to copy static files from external dependencies, you can customize the
  contents of this task.

  Normally, this task is executed indirectly when needed.
-->

  <target name="prepare">

    <!-- Create build directory and copy static content -->
    <mkdir  dir="${build.home}"/>
  </target>

<!-- ==================== Deploy Target ===================================== -->

<!--
   Creates .jar files for deployment as a java web start project
-->

  <target name="deploy" depends="compile, corina-indexing" description="Create deployable binary distribution">
    <!-- Copy documentation subdirectory -->
    <!--  <copy todir="${dist.home}/docs">
      <fileset dir="doc"/>
    </copy> -->

    <!-- Create deploy directory and copy static content -->
    <mkdir dir="${deploy.home}"/>

    <!-- Create resource JAR file -->
    <jar jarfile="${deploy.home}/${app.name}-resources.jar"
         index="true" compress="true">

	<fileset dir="src" casesensitive="no">
		<include name="edu/cornell/dendro/corina_resources/**/*.gif"/>
		<include name="edu/cornell/dendro/corina_resources/**/*.jpg"/>
		<include name="edu/cornell/dendro/corina_resources/**/*.png"/>
		<include name="edu/cornell/dendro/corina_resources/**/*.wav"/>
		<include name="edu/cornell/dendro/webservice/schemas/*.xsd"/>
        </fileset>

    </jar>

    <signjar jar="${deploy.home}/${app.name}-resources.jar" alias="dendro" storepass="d3ndr0" keystore="${app.keystore}"/>

    <tstamp>
	<format property="deploy.releaseid" pattern="hh:mm dd-MM-yyy"/>
    </tstamp>

    <echo file="src/Timestamp" message="${deploy.releaseid}"/>

    <jar jarfile="${deploy.home}/${app.name}-${app.version}.jar"
         basedir="${build.home}" index="true" compress="true">

	<fileset dir="src" casesensitive="no">
		<include name="log4j.xml"/>
		<include name="Timestamp"/>
		<include name="edu/cornell/dendro/corina_resources/*.properties"/>
		<include name="edu/cornell/dendro/corina_resources/Translations/**"/>
		<include name="edu/cornell/dendro/corina_resources/Statistics/**"/>
		<include name="edu/cornell/dendro/corina_resources/Licenses/**"/>
		<exclude name="edu/cornell/dendro/corina_indexing/**"/>
		<include name="edu/cornell/dendro/corina/**/*.properties"/>
	</fileset>

    	<manifest>
    		<attribute name="Main-Class" value="${app.name}.gui.Startup"/>
   	</manifest>   	
    </jar>

    <signjar jar="${deploy.home}/${app.name}-${app.version}.jar" alias="dendro" storepass="d3ndr0" keystore="${app.keystore}"/>

    <!-- Sign the indexing jar, while we're at it.. -->
    <signjar jar="${deploy.home}/${app.name}-indexing.jar" alias="dendro" storepass="d3ndr0" keystore="${app.keystore}"/>

  </target>

<!--
   Creates .jar files for postgresql db functions
-->

  <target name="cpgdb" depends="prepare" description="Create deployable binary distribution of databasing functions">
    <!-- Compile Java classes as necessary -->
    <javac srcdir="src"
          destdir="${build.home}"
            debug="${compile.debug}"
      deprecation="${compile.deprecation}"
         optimize="${compile.optimize}"
         includes="edu/cornell/dendro/cpgdb/**">
      <classpath refid="compile.classpath"/>
    </javac>

    <!-- Create deploy directory and copy static content -->
    <mkdir dir="${deploy.home}"/>

    <jar jarfile="${deploy.home}/cpgdb.jar"
         basedir="${build.home}" index="true" compress="true" includes="edu/cornell/dendro/cpgdb/**">
    </jar>

  </target>

<!--
   Creates .jar files for indexing math functions
-->

  <target name="corina-indexing" depends="compile" description="Create deployable binary distribution of databasing functions">
    <!-- Create deploy directory and copy static content -->
    <mkdir dir="${deploy.home}"/>

    <!-- Create corina_indexing JAR file -->
    <jar jarfile="${deploy.home}/${app.name}-indexing.jar"
         basedir="${build.home}" index="true" compress="true" includes="edu/cornell/dendro/corina_indexing/**">
    </jar>
  </target>

<!--
   Cleans (deletes) corina, tridas, gml schema
-->
	<target name="cleanschema" description="Clean webservice schemas">
		<delete>
	    	<fileset dir="src">
				<include name="edu/cornell/dendro/schema/**/*.java" />
			</fileset>
		</delete>
	</target>
	
<!--
   Creates corina, tridas, gml schema
-->
	<target name="buildschema" description="Rebuild webservice schemas">

		<xjc destdir="src" target="2.1">
			<arg value="-Xannotate" />
			<arg value="-Xifins" />
			<arg value="-Xcollection-setter-injector" />
			<arg value="-Xequals" />
			<arg value="-XhashCode" />
			<arg value="-XtoString" />
			<arg value="-Xcopyable" />
			<arg value="-extension" />
			<arg value="-no-header" />
			
			<binding dir="schemagen">
				<include name="*.xjb" />
			</binding>
			<schema dir="src/edu/cornell/dendro/webservice/schemas">
				<include name="corina.xsd" />
			</schema>
			<produces dir="src">
				<include name="edu/cornell/dendro/schema/**/*.java" />
			</produces>
		</xjc>

		<!-- Delete out all the GML and TRiDaS schemas as we're using external libs for these-->
		<delete dir="src/org/tridas/schema"/>
		<delete dir="src/net/opengis/gml"/>
		
		 <!--Make a javadoc for the java code
		<mkdir dir="${dist.home}/docs/jaxbschema" />
	    <javadoc
	           classpathref="compile.classpath"
	                destdir="${dist.home}/docs/jaxbschema"
	                 access="protected"
	                 author="true"
	                version="true"
	                    use="true"
	          breakiterator="true"
	            windowtitle="${app.name} ${app.version} API Documentation">
	      <doctitle><![CDATA[${app.name} ${app.version}<br/>API Documentation]]></doctitle>
	      <header><![CDATA[${app.name} ${app.version}<br/>API Documentation]]></header>
	    	<fileset dir="src">
	    		<include name="edu/cornell/dendro/corina/tridasv2/TridasObjectEx.java" />
				<include name="edu/cornell/dendro/schema/**/*.java" />
				<include name="net/opengis/gml/schema/**/*.java" />
				<include name="org/tridas/**/*.java" />
    		</fileset>
	    </javadoc>-->
	</target>
		
    <target name="create_run_jar">
        <jar destfile="target/Corina.jar">
            <manifest>
                <attribute name="Main-Class" value="org.eclipse.jdt.internal.jarinjarloader.JarRsrcLoader"/>
                <attribute name="Rsrc-Main-Class" value="edu.cornell.dendro.corina.gui.Startup"/>
                <attribute name="Class-Path" value="."/>
                <attribute name="Rsrc-Class-Path" value="./ batik.jar junit.jar RXTXcomm.jar jdom.jar forms-1.1.0.jar swing-layout-1.0.3.jar log4j-1.2.15.jar jna.jar commons-logging-1.1.1.jar apache-mime4j-0.5.jar commons-codec-1.3.jar httpclient-4.0-beta2.jar httpcore-4.0-beta3.jar httpmime-4.0-beta2.jar jh.jar jsyntaxpane-0.9.5-b17.jar activation.jar l2fprod-common-shared.jar l2fprod-common-sheet.jar jaxen-1.1.1.jar l2fprod-common-buttonbar.jar iText-2.1.6.jar jsr173_1.0_api.jar commons-lang-2.4.jar coll-prop.0.1-1.5.jar PDFRenderer.jar DendroFileIO-0.0.1-SNAPSHOT.jar TridasJLib-0.0.1-SNAPSHOT.jar java-simple-mvc-1.3.4-SNAPSHOT.jar JGoogleAnalyticsTracker-1.1.0.jar gluegen-rt.jar jogl.jar worldwind-0.6.570.13645.jar JFontChooser.jar jfontchooser-1.0.5.jar pljava.jar postgresql-8.2-506.jdbc3.jar miglayout15-swing.jar"/>
            </manifest>
            <zipfileset src="Libraries/jar-in-jar-loader.zip"/>
            <fileset dir="build"/>
            <zipfileset dir="Libraries" includes="batik.jar"/>
            <zipfileset dir="Libraries" includes="junit.jar"/>
            <fileset dir="Libraries"/>
            <zipfileset dir="Libraries" includes="RXTXcomm.jar"/>
            <zipfileset dir="Libraries" includes="jdom.jar"/>
            <zipfileset dir="Libraries" includes="forms-1.1.0.jar"/>
            <zipfileset dir="Libraries" includes="swing-layout-1.0.3.jar"/>
            <zipfileset dir="Libraries" includes="log4j-1.2.15.jar"/>
            <zipfileset dir="Libraries" includes="jna.jar"/>
            <zipfileset dir="Libraries" includes="commons-logging-1.1.1.jar"/>
            <zipfileset dir="Libraries" includes="apache-mime4j-0.5.jar"/>
            <zipfileset dir="Libraries" includes="commons-codec-1.3.jar"/>
            <zipfileset dir="Libraries" includes="httpclient-4.0-beta2.jar"/>
            <zipfileset dir="Libraries" includes="httpcore-4.0-beta3.jar"/>
            <zipfileset dir="Libraries" includes="httpmime-4.0-beta2.jar"/>
            <zipfileset dir="Libraries" includes="jh.jar"/>
            <zipfileset dir="Libraries" includes="jsyntaxpane-0.9.5-b17.jar"/>
            <zipfileset dir="Libraries" includes="activation.jar"/>
            <zipfileset dir="Libraries" includes="l2fprod-common-shared.jar"/>
            <zipfileset dir="Libraries" includes="l2fprod-common-sheet.jar"/>
            <zipfileset dir="Libraries" includes="jaxen-1.1.1.jar"/>
            <zipfileset dir="Libraries" includes="l2fprod-common-buttonbar.jar"/>
            <zipfileset dir="Libraries" includes="iText-2.1.6.jar"/>
            <zipfileset dir="Libraries/jaxb" includes="jsr173_1.0_api.jar"/>
            <zipfileset dir="Libraries" includes="commons-lang-2.4.jar"/>
            <zipfileset dir="Libraries/jaxb/plugin" includes="coll-prop.0.1-1.5.jar"/>
            <zipfileset dir="Libraries" includes="PDFRenderer.jar"/>
            <zipfileset dir="Libraries" includes="DendroFileIO-0.0.1-SNAPSHOT.jar"/>
            <zipfileset dir="Libraries" includes="TridasJLib-0.0.1-SNAPSHOT.jar"/>
            <zipfileset dir="Libraries" includes="java-simple-mvc-1.3.4-SNAPSHOT.jar"/>
            <zipfileset dir="Libraries" includes="JGoogleAnalyticsTracker-1.1.0.jar"/>
            <zipfileset dir="Libraries" includes="gluegen-rt.jar"/>
            <zipfileset dir="Libraries" includes="jogl.jar"/>
            <zipfileset dir="Libraries" includes="worldwind-0.6.570.13645.jar"/>
            <zipfileset dir="Libraries" includes="JFontChooser.jar"/>
            <zipfileset dir="Libraries" includes="jfontchooser-1.0.5.jar"/>
            <zipfileset dir="Libraries" includes="pljava.jar"/>
            <zipfileset dir="Libraries" includes="postgresql-8.2-506.jdbc3.jar"/>
            <zipfileset dir="Libraries" includes="miglayout15-swing.jar"/>
        </jar>
    	


    </target>
	
	<!-- Clean existing executables-->
	<target name="native-clean">
		  <delete includeemptydirs="true">
		    <fileset dir="${dist.home}" includes="**/*"/>
		  </delete>

	</target>
	
	<!-- Windows Native Executable -->
	<target name="native-win" depends="native-clean, create_run_jar" description="Build native Windows exe">
		<launch4j configFile="native/WinBuild/launch4j.config.xml" />	
	</target>
	
	<!-- MacOSX Native Executable-->
	<target name="native-mac" depends="native-clean, create_run_jar" description="Build native MacOSX app and dmg files">
    	
		<!-- create app file-->
		<jarbundler dir="${dist.home}" 
			name="Corina" 
			mainclass="org.eclipse.jdt.internal.jarinjarloader.JarRsrcLoader" 
			jar="${dist.home}/Corina.jar" 
			version="2.10"
			icon="src/edu/cornell/dendro/corina_resources/Icons/corina-application.icns"
			stubfile="native/MacBuild/JavaApplicationStub">
		      <javaproperty name="apple.laf.useScreenMenuBar" value="true"/>
		      <javaproperty name="apple.awt.brushMetal" value="true"/>
		      <javaproperty name="apple.awt.showGrowBox" value="false"/>
			  
			  <!-- Include native libs -->
			  <javafilelist dir="native/Libraries" files="libgluegen-rt.jnilib"/>
			  <javafilelist dir="native/Libraries" files="libgluegen-rt.so"/>
			  <javafilelist dir="native/Libraries" files="libjogl_awt.jnilib"/>
			  <javafilelist dir="native/Libraries" files="libjogl_awt.so"/>
			  <javafilelist dir="native/Libraries" files="libjogl_cg.jnilib"/>
			  <javafilelist dir="native/Libraries" files="libjogl_cg.so"/>
			  <javafilelist dir="native/Libraries" files="libjogl.jnilib"/>
			  <javafilelist dir="native/Libraries" files="libjogl.so"/>
			  <javafilelist dir="native/Libraries" files="librxtxSerial.jnilib"/>
		</jarbundler>
		
		<!-- wrap in dmg file-->
		<exec executable="hdiutil">
			<arg line="create -srcfolder ${dist.home}/Corina.app ${dist.home}/Corina.dmg"/>
		</exec>
		
		<!-- Delete the Corina.app folder -->
		<delete dir="${dist.home}/Corina.app" />
		
	</target>
	
	<!-- Ubuntu Linux Native Executable -->
	<target name="native-linux" depends="create_run_jar" description="Build native Ubuntu Linux deb file">
		
        <desktopEntry
            toFile="target/Corina.desktop"
            name="Corina"
            comment="Dendrochronology Software"
            exec="java -jar /usr/share/corina/Corina.jar"
            path="/usr/share/corina/"
            icon="/usr/share/corina/corina-application.png"
            categories="Education"
        />
		
		<deb todir="${dist.home}" package="corina" section="utils" depends="sun-java6-jre">
			<version upstream="2.11"/>
			<maintainer email="p.brewer@cornell.edu" name="Peter Brewer"/>
			<description synopsis="Dendrochronology software">Software for measuring and organising dendro data</description>
			<tarfileset dir="${dist.home}" prefix="usr/share/corina">
				<include name="*.jar"/>
			</tarfileset>
			<tarfileset dir="native/Libraries" prefix="usr/lib">
				<include name="*.jnilib"/>
				<include name="*.so"/>
			</tarfileset>
			<tarfileset file="src/edu/cornell/dendro/corina_resources/Icons/128x128/corina-application.png" prefix="usr/share/corina"/>
			<tarfileset file="${dist.home}/Corina.desktop" prefix="usr/share/applications"/>
		</deb>
		
		<delete file="${dist.home}/Corina.desktop" />
	</target>
	
	<!-- Build native executables for all platforms -->
	<target name="native-all-platforms" depends="native-win, native-mac, native-linux" description="Build native executables for all platforms">
		<echo message="Building on platform: ${os.name}"/>
	</target>
	
	
	<!-- Build server Deb package -->
	<target name="server-package" description="Build Ubuntu deb package for all Corina server components">
		<delete file="${dist.home}/corina-server_2.11-1_all.deb" />
		<deb todir="${dist.home}" package="corina-server" section="utils" 
			depends="postgresql-8.4, apache2" 
			suggests="pgadmin3, openssl"
			postinst="native/LinBuild/server_post_install.sh">
			<version upstream="2.11"/>
			<maintainer email="p.brewer@cornell.edu" name="Peter Brewer"/>
			<description synopsis="Dendrochronology server">TRiDaS enabled dendrochronology server</description>
			
			<!-- Database -->
			<tarfileset file="databases/pg_dump_corina.sql" prefix="usr/share/corina-server"/>
			<tarfileset file="databases/dummy.sql" prefix="usr/share/corina-server"/>
			<tarfileset file="native/LinBuild/corina-apache" prefix="usr/share/corina-server"/>

			<tarfileset file="native/LinBuild/server_post_install.sh" prefix="usr/share/corina-server" filemode="755"/>

			
			<!-- Webservice -->
			<tarfileset dir="src/edu/cornell/dendro/webservice" prefix="/var/www/corina-webservice/">
				<include name="*"/>
			</tarfileset>


		</deb>
		
	</target>

	
</project>
